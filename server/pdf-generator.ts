import PDFDocument from 'pdfkit';
import type { Invoice, Client, InvoiceItem, Settings } from '@shared/schema';

export class PDFGenerator {
  generateInvoicePDF(
    invoice: Invoice & { client: Client; items: InvoiceItem[] }, 
    settings: Settings
  ): PDFKit.PDFDocument {
    const doc = new PDFDocument({ margin: 50 });

    // Header
    this.addHeader(doc, settings);
    
    // Invoice details
    this.addInvoiceDetails(doc, invoice);
    
    // Client details
    this.addClientDetails(doc, invoice.client);
    
    // Items table
    this.addItemsTable(doc, invoice.items, settings.currency);
    
    // Totals
    this.addTotals(doc, invoice, settings.currency);
    
    // Footer
    this.addFooter(doc, settings);

    return doc;
  }

  private addHeader(doc: PDFKit.PDFDocument, settings: Settings) {
    doc.fontSize(20)
       .text(settings.companyName, 50, 50)
       .fontSize(10)
       .text(settings.email, 50, 75);

    if (settings.phone) {
      doc.text(settings.phone, 50, 90);
    }

    if (settings.address) {
      doc.text(settings.address, 50, 105);
    }

    // Invoice title
    doc.fontSize(24)
       .text('INVOICE', 400, 50, { align: 'right' });
  }

  private addInvoiceDetails(doc: PDFKit.PDFDocument, invoice: Invoice) {
    const startY = 150;
    
    doc.fontSize(12)
       .text('Invoice Number:', 400, startY)
       .text(invoice.number, 500, startY)
       .text('Date:', 400, startY + 20)
       .text(new Date(invoice.createdAt).toLocaleDateString(), 500, startY + 20)
       .text('Due Date:', 400, startY + 40)
       .text(new Date(invoice.dueDate).toLocaleDateString(), 500, startY + 40)
       .text('Status:', 400, startY + 60)
       .text(invoice.status.toUpperCase(), 500, startY + 60);
  }

  private addClientDetails(doc: PDFKit.PDFDocument, client: Client) {
    const startY = 150;
    
    doc.fontSize(12)
       .text('Bill To:', 50, startY)
       .fontSize(11)
       .text(client.name, 50, startY + 20)
       .text(client.email, 50, startY + 40);

    if (client.phone) {
      doc.text(client.phone, 50, startY + 60);
    }

    if (client.address) {
      doc.text(client.address, 50, startY + 80);
    }
  }

  private addItemsTable(doc: PDFKit.PDFDocument, items: InvoiceItem[], currency: string = 'INR') {
    const tableTop = 280;
    const itemCodeX = 50;
    const descriptionX = 150;
    const quantityX = 350;
    const rateX = 420;
    const amountX = 490;

    // Currency symbol mapping
    const currencySymbols = {
      'INR': '₹',
      'USD': '$',
      'EUR': '€',
      'GBP': '£'
    };
    const symbol = currencySymbols[currency as keyof typeof currencySymbols] || '₹';

    // Table headers
    doc.fontSize(12)
       .text('Description', descriptionX, tableTop)
       .text('Qty', quantityX, tableTop)
       .text('Rate', rateX, tableTop)
       .text('Amount', amountX, tableTop);

    // Draw header line
    doc.moveTo(50, tableTop + 20)
       .lineTo(550, tableTop + 20)
       .stroke();

    let currentY = tableTop + 30;

    // Table rows
    items.forEach((item, index) => {
      doc.fontSize(10)
         .text(item.description, descriptionX, currentY)
         .text(item.quantity, quantityX, currentY)
         .text(`${symbol}${parseFloat(item.rate).toFixed(2)}`, rateX, currentY)
         .text(`${symbol}${parseFloat(item.amount).toFixed(2)}`, amountX, currentY);

      currentY += 25;
    });

    // Draw bottom line
    doc.moveTo(50, currentY)
       .lineTo(550, currentY)
       .stroke();

    return currentY + 20;
  }

  private addTotals(doc: PDFKit.PDFDocument, invoice: Invoice, currency: string = 'INR') {
    const totalsX = 400;
    let currentY = 400;

    // Currency symbol mapping
    const currencySymbols = {
      'INR': '₹',
      'USD': '$',
      'EUR': '€',
      'GBP': '£'
    };
    const symbol = currencySymbols[currency as keyof typeof currencySymbols] || '₹';

    doc.fontSize(11)
       .text('Subtotal:', totalsX, currentY)
       .text(`${symbol}${parseFloat(invoice.subtotal).toFixed(2)}`, totalsX + 80, currentY);

    currentY += 20;
    
    if (parseFloat(invoice.taxRate) > 0) {
      doc.text(`Tax (${invoice.taxRate}%):`, totalsX, currentY)
         .text(`${symbol}${parseFloat(invoice.taxAmount).toFixed(2)}`, totalsX + 80, currentY);
      currentY += 20;
    }

    // Total line
    doc.moveTo(totalsX, currentY)
       .lineTo(totalsX + 120, currentY)
       .stroke();

    currentY += 10;

    doc.fontSize(12)
       .text('Total:', totalsX, currentY)
       .text(`${symbol}${parseFloat(invoice.total).toFixed(2)}`, totalsX + 80, currentY);
  }

  private addFooter(doc: PDFKit.PDFDocument, settings: Settings) {
    doc.fontSize(9)
       .text('Thank you for your business!', 50, 700, { align: 'center' })
       .text(`Generated by ${settings.companyName}`, 50, 715, { align: 'center' });
  }
}